import pygame
import random

pygame.init()

# 화면 설정
WIDTH, HEIGHT = 300, 600
win = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("테트리스")

# 색상 정의
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
RED = (255, 0, 0)
GREEN = (0, 255, 0)
BLUE = (0, 0, 255)
CYAN = (0, 255, 255)
MAGENTA = (255, 0, 255)
YELLOW = (255, 255, 0)
ORANGE = (255, 165, 0)

# 테트리스 블록 모양 정의
SHAPES = [
    [[1, 1, 1, 1]],
    [[1, 1], [1, 1]],
    [[1, 1, 1], [0, 1, 0]],
    [[1, 1, 1], [1, 0, 0]],
    [[1, 1, 1], [0, 0, 1]],
    [[1, 1, 0], [0, 1, 1]],
    [[0, 1, 1], [1, 1, 0]]
]

# 블록 클래스 정의
class Block:
    def __init__(self, shape, color):
        self.shape = shape
        self.color = color
        self.row = 0
        self.col = WIDTH // 2 - len(shape[0]) // 2

# 테트리스 게임 클래스 정의
class Tetris:
    def __init__(self):
        self.grid = [[0] * (WIDTH // 30) for _ in range(HEIGHT // 30)]
        self.current_block = self.new_block()
        self.clock = pygame.time.Clock()

    def new_block(self):
        shape = random.choice(SHAPES)
        color = random.choice([RED, GREEN, BLUE, CYAN, MAGENTA, YELLOW, ORANGE])
        return Block(shape, color)

    def draw_grid(self):
        for i in range(len(self.grid)):
            for j in range(len(self.grid[0])):
                if self.grid[i][j] != 0:
                    pygame.draw.rect(win, self.grid[i][j], (j * 30, i * 30, 30, 30))

    def draw_block(self, block):
        for i in range(len(block.shape)):
            for j in range(len(block.shape[0])):
                if block.shape[i][j] == 1:
                    pygame.draw.rect(win, block.color, ((block.col + j) * 30, (block.row + i) * 30, 30, 30))

    def move_block(self, block, row, col):
        block.row += row
        block.col += col

    def valid_move(self, block, row, col):
        for i in range(len(block.shape)):
            for j in range(len(block.shape[0])):
                if block.shape[i][j] == 1:
                    new_row = block.row + i + row
                    new_col = block.col + j + col
                    if (
                        new_row < 0
                        or new_col < 0
                        or new_row >= len(self.grid)
                        or new_col >= len(self.grid[0])
                        or self.grid[new_row][new_col] != 0
                    ):
                        return False
        return True

    def freeze_block(self, block):
        for i in range(len(block.shape)):
            for j in range(len(block.shape[0])):
                if block.shape[i][j] == 1:
                    self.grid[block.row + i][block.col + j] = block.color

    def clear_lines(self):
        full_rows = [i for i, row in enumerate(self.grid) if all(row)]
        for row in full_rows:
            del self.grid[row]
            self.grid.insert(0, [0] * (WIDTH // 30))

    def run(self):
        while True:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    pygame.quit()
                    quit()
                elif event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_LEFT and self.valid_move(self.current_block, 0, -1):
                        self.move_block(self.current_block, 0, -1)
                    elif event.key == pygame.K_RIGHT and self.valid_move(self.current_block, 0, 1):
                        self.move_block(self.current_block, 0, 1)
                    elif event.key == pygame.K_DOWN and self.valid_move(self.current_block, 1, 0):
                        self.move_block(self.current_block, 1, 0)

            if self.valid_move(self.current_block, 1, 0):
                self.move_block(self.current_block, 1, 0)
            else:
                self.freeze_block(self.current_block)
                self.clear_lines()
                self.current_block = self.new_block()

            win.fill(BLACK)
            self.draw_grid()
            self.draw_block(self.current_block)
            pygame.display.update()
            self.clock.tick(5)

if __name__ == "__main__":
    Tetris().run()